/* automatically generated by rust-bindgen */

/* Then pruned by hand to keep only the needed parts. */


pub type krb5_int32 = ::libc::c_int;
pub type krb5_error_code = krb5_int32;
pub type krb5_magic = krb5_error_code;

pub enum Struct__krb5_context { }
pub type krb5_context = *mut Struct__krb5_context;
#[link(name = "krb5")]
#[link(name = "k5crypto")]
#[link(name = "com_err")]
extern "C" {
    pub fn krb5_init_context(context: *mut krb5_context)
                             -> krb5_error_code;
    pub fn krb5_cc_default(context: krb5_context, ccache: *mut krb5_ccache)
                           -> krb5_error_code;
    pub fn krb5_cc_get_principal(context: krb5_context, cache: krb5_ccache,
                                 principal: *mut krb5_principal)
                                 -> krb5_error_code;

}

pub enum Struct__krb5_ccache { }
pub type krb5_ccache = *mut Struct__krb5_ccache;

#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_data {
    pub magic: krb5_magic,
    pub length: ::libc::c_uint,
    pub data: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct__krb5_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_data = Struct__krb5_data;

#[repr(C)]
#[derive(Copy)]
pub struct Struct_krb5_principal_data {
    pub magic: krb5_magic,
    pub realm: krb5_data,
    pub data: *mut krb5_data,
    pub length: krb5_int32,
    pub _type: krb5_int32,
}
impl ::std::clone::Clone for Struct_krb5_principal_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_krb5_principal_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_principal_data = Struct_krb5_principal_data;
pub type krb5_principal = *mut krb5_principal_data;

