/* automatically generated by rust-bindgen */

pub enum Struct__profile_t { }
pub type krb5_octet = ::libc::c_uchar;
pub type krb5_int16 = ::libc::c_short;
pub type krb5_ui_2 = ::libc::c_ushort;
pub type krb5_int32 = ::libc::c_int;
pub type krb5_ui_4 = ::libc::c_uint;
pub type krb5_boolean = ::libc::c_uint;
pub type krb5_msgtype = ::libc::c_uint;
pub type krb5_kvno = ::libc::c_uint;
pub type krb5_addrtype = krb5_int32;
pub type krb5_enctype = krb5_int32;
pub type krb5_cksumtype = krb5_int32;
pub type krb5_authdatatype = krb5_int32;
pub type krb5_keyusage = krb5_int32;
pub type krb5_cryptotype = krb5_int32;
pub type krb5_preauthtype = krb5_int32;
pub type krb5_flags = krb5_int32;
pub type krb5_timestamp = krb5_int32;
pub type krb5_error_code = krb5_int32;
pub type krb5_deltat = krb5_int32;
pub type krb5_magic = krb5_error_code;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_data {
    pub magic: krb5_magic,
    pub length: ::libc::c_uint,
    pub data: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct__krb5_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_data = Struct__krb5_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_octet_data {
    pub magic: krb5_magic,
    pub length: ::libc::c_uint,
    pub data: *mut krb5_octet,
}
impl ::std::clone::Clone for Struct__krb5_octet_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_octet_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_octet_data = Struct__krb5_octet_data;
pub type krb5_pointer = *mut ::libc::c_void;
pub type krb5_const_pointer = *const ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_krb5_principal_data {
    pub magic: krb5_magic,
    pub realm: krb5_data,
    pub data: *mut krb5_data,
    pub length: krb5_int32,
    pub _type: krb5_int32,
}
impl ::std::clone::Clone for Struct_krb5_principal_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_krb5_principal_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_principal_data = Struct_krb5_principal_data;
pub type krb5_principal = *mut krb5_principal_data;
pub type krb5_const_principal = *const krb5_principal_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_address {
    pub magic: krb5_magic,
    pub addrtype: krb5_addrtype,
    pub length: ::libc::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::clone::Clone for Struct__krb5_address {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_address {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_address = Struct__krb5_address;
pub enum Struct__krb5_context { }
pub type krb5_context = *mut Struct__krb5_context;
pub enum Struct__krb5_auth_context { }
pub type krb5_auth_context = *mut Struct__krb5_auth_context;
pub enum Struct__krb5_cryptosystem_entry { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_keyblock {
    pub magic: krb5_magic,
    pub enctype: krb5_enctype,
    pub length: ::libc::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::clone::Clone for Struct__krb5_keyblock {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_keyblock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_keyblock = Struct__krb5_keyblock;
pub enum Struct_krb5_key_st { }
pub type krb5_key = *mut Struct_krb5_key_st;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_encrypt_block {
    pub magic: krb5_magic,
    pub crypto_entry: krb5_enctype,
    pub key: *mut krb5_keyblock,
}
impl ::std::clone::Clone for Struct__krb5_encrypt_block {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_encrypt_block {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_encrypt_block = Struct__krb5_encrypt_block;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_checksum {
    pub magic: krb5_magic,
    pub checksum_type: krb5_cksumtype,
    pub length: ::libc::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::clone::Clone for Struct__krb5_checksum {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_checksum {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_checksum = Struct__krb5_checksum;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_enc_data {
    pub magic: krb5_magic,
    pub enctype: krb5_enctype,
    pub kvno: krb5_kvno,
    pub ciphertext: krb5_data,
}
impl ::std::clone::Clone for Struct__krb5_enc_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_enc_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_enc_data = Struct__krb5_enc_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_crypto_iov {
    pub flags: krb5_cryptotype,
    pub data: krb5_data,
}
impl ::std::clone::Clone for Struct__krb5_crypto_iov {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_crypto_iov {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_crypto_iov = Struct__krb5_crypto_iov;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const KRB5_C_RANDSOURCE_OLDAPI: ::libc::c_uint = 0;
pub const KRB5_C_RANDSOURCE_OSRAND: ::libc::c_uint = 1;
pub const KRB5_C_RANDSOURCE_TRUSTEDPARTY: ::libc::c_uint = 2;
pub const KRB5_C_RANDSOURCE_TIMING: ::libc::c_uint = 3;
pub const KRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL: ::libc::c_uint = 4;
pub const KRB5_C_RANDSOURCE_MAX: ::libc::c_uint = 5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_ticket_times {
    pub authtime: krb5_timestamp,
    pub starttime: krb5_timestamp,
    pub endtime: krb5_timestamp,
    pub renew_till: krb5_timestamp,
}
impl ::std::clone::Clone for Struct__krb5_ticket_times {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_ticket_times {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ticket_times = Struct__krb5_ticket_times;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_authdata {
    pub magic: krb5_magic,
    pub ad_type: krb5_authdatatype,
    pub length: ::libc::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::clone::Clone for Struct__krb5_authdata {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_authdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_authdata = Struct__krb5_authdata;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_transited {
    pub magic: krb5_magic,
    pub tr_type: krb5_octet,
    pub tr_contents: krb5_data,
}
impl ::std::clone::Clone for Struct__krb5_transited {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_transited {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_transited = Struct__krb5_transited;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_enc_tkt_part {
    pub magic: krb5_magic,
    pub flags: krb5_flags,
    pub session: *mut krb5_keyblock,
    pub client: krb5_principal,
    pub transited: krb5_transited,
    pub times: krb5_ticket_times,
    pub caddrs: *mut *mut krb5_address,
    pub authorization_data: *mut *mut krb5_authdata,
}
impl ::std::clone::Clone for Struct__krb5_enc_tkt_part {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_enc_tkt_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_enc_tkt_part = Struct__krb5_enc_tkt_part;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_ticket {
    pub magic: krb5_magic,
    pub server: krb5_principal,
    pub enc_part: krb5_enc_data,
    pub enc_part2: *mut krb5_enc_tkt_part,
}
impl ::std::clone::Clone for Struct__krb5_ticket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_ticket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ticket = Struct__krb5_ticket;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_authenticator {
    pub magic: krb5_magic,
    pub client: krb5_principal,
    pub checksum: *mut krb5_checksum,
    pub cusec: krb5_int32,
    pub ctime: krb5_timestamp,
    pub subkey: *mut krb5_keyblock,
    pub seq_number: krb5_ui_4,
    pub authorization_data: *mut *mut krb5_authdata,
}
impl ::std::clone::Clone for Struct__krb5_authenticator {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_authenticator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_authenticator = Struct__krb5_authenticator;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_tkt_authent {
    pub magic: krb5_magic,
    pub ticket: *mut krb5_ticket,
    pub authenticator: *mut krb5_authenticator,
    pub ap_options: krb5_flags,
}
impl ::std::clone::Clone for Struct__krb5_tkt_authent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_tkt_authent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_tkt_authent = Struct__krb5_tkt_authent;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_creds {
    pub magic: krb5_magic,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub keyblock: krb5_keyblock,
    pub times: krb5_ticket_times,
    pub is_skey: krb5_boolean,
    pub ticket_flags: krb5_flags,
    pub addresses: *mut *mut krb5_address,
    pub ticket: krb5_data,
    pub second_ticket: krb5_data,
    pub authdata: *mut *mut krb5_authdata,
}
impl ::std::clone::Clone for Struct__krb5_creds {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_creds {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_creds = Struct__krb5_creds;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_last_req_entry {
    pub magic: krb5_magic,
    pub lr_type: krb5_int32,
    pub value: krb5_timestamp,
}
impl ::std::clone::Clone for Struct__krb5_last_req_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_last_req_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_last_req_entry = Struct__krb5_last_req_entry;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_pa_data {
    pub magic: krb5_magic,
    pub pa_type: krb5_preauthtype,
    pub length: ::libc::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::clone::Clone for Struct__krb5_pa_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_pa_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_pa_data = Struct__krb5_pa_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_typed_data {
    pub magic: krb5_magic,
    pub _type: krb5_int32,
    pub length: ::libc::c_uint,
    pub data: *mut krb5_octet,
}
impl ::std::clone::Clone for Struct__krb5_typed_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_typed_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_typed_data = Struct__krb5_typed_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_kdc_req {
    pub magic: krb5_magic,
    pub msg_type: krb5_msgtype,
    pub padata: *mut *mut krb5_pa_data,
    pub kdc_options: krb5_flags,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub from: krb5_timestamp,
    pub till: krb5_timestamp,
    pub rtime: krb5_timestamp,
    pub nonce: krb5_int32,
    pub nktypes: ::libc::c_int,
    pub ktype: *mut krb5_enctype,
    pub addresses: *mut *mut krb5_address,
    pub authorization_data: krb5_enc_data,
    pub unenc_authdata: *mut *mut krb5_authdata,
    pub second_ticket: *mut *mut krb5_ticket,
}
impl ::std::clone::Clone for Struct__krb5_kdc_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_kdc_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_kdc_req = Struct__krb5_kdc_req;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_enc_kdc_rep_part {
    pub magic: krb5_magic,
    pub msg_type: krb5_msgtype,
    pub session: *mut krb5_keyblock,
    pub last_req: *mut *mut krb5_last_req_entry,
    pub nonce: krb5_int32,
    pub key_exp: krb5_timestamp,
    pub flags: krb5_flags,
    pub times: krb5_ticket_times,
    pub server: krb5_principal,
    pub caddrs: *mut *mut krb5_address,
    pub enc_padata: *mut *mut krb5_pa_data,
}
impl ::std::clone::Clone for Struct__krb5_enc_kdc_rep_part {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_enc_kdc_rep_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_enc_kdc_rep_part = Struct__krb5_enc_kdc_rep_part;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_kdc_rep {
    pub magic: krb5_magic,
    pub msg_type: krb5_msgtype,
    pub padata: *mut *mut krb5_pa_data,
    pub client: krb5_principal,
    pub ticket: *mut krb5_ticket,
    pub enc_part: krb5_enc_data,
    pub enc_part2: *mut krb5_enc_kdc_rep_part,
}
impl ::std::clone::Clone for Struct__krb5_kdc_rep {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_kdc_rep {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_kdc_rep = Struct__krb5_kdc_rep;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_error {
    pub magic: krb5_magic,
    pub ctime: krb5_timestamp,
    pub cusec: krb5_int32,
    pub susec: krb5_int32,
    pub stime: krb5_timestamp,
    pub error: krb5_ui_4,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub text: krb5_data,
    pub e_data: krb5_data,
}
impl ::std::clone::Clone for Struct__krb5_error {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_error {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_error = Struct__krb5_error;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_ap_req {
    pub magic: krb5_magic,
    pub ap_options: krb5_flags,
    pub ticket: *mut krb5_ticket,
    pub authenticator: krb5_enc_data,
}
impl ::std::clone::Clone for Struct__krb5_ap_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_ap_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ap_req = Struct__krb5_ap_req;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_ap_rep {
    pub magic: krb5_magic,
    pub enc_part: krb5_enc_data,
}
impl ::std::clone::Clone for Struct__krb5_ap_rep {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_ap_rep {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ap_rep = Struct__krb5_ap_rep;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_ap_rep_enc_part {
    pub magic: krb5_magic,
    pub ctime: krb5_timestamp,
    pub cusec: krb5_int32,
    pub subkey: *mut krb5_keyblock,
    pub seq_number: krb5_ui_4,
}
impl ::std::clone::Clone for Struct__krb5_ap_rep_enc_part {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_ap_rep_enc_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ap_rep_enc_part = Struct__krb5_ap_rep_enc_part;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_response {
    pub magic: krb5_magic,
    pub message_type: krb5_octet,
    pub response: krb5_data,
    pub expected_nonce: krb5_int32,
    pub request_time: krb5_timestamp,
}
impl ::std::clone::Clone for Struct__krb5_response {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_response {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_response = Struct__krb5_response;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_cred_info {
    pub magic: krb5_magic,
    pub session: *mut krb5_keyblock,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub flags: krb5_flags,
    pub times: krb5_ticket_times,
    pub caddrs: *mut *mut krb5_address,
}
impl ::std::clone::Clone for Struct__krb5_cred_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_cred_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_cred_info = Struct__krb5_cred_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_cred_enc_part {
    pub magic: krb5_magic,
    pub nonce: krb5_int32,
    pub timestamp: krb5_timestamp,
    pub usec: krb5_int32,
    pub s_address: *mut krb5_address,
    pub r_address: *mut krb5_address,
    pub ticket_info: *mut *mut krb5_cred_info,
}
impl ::std::clone::Clone for Struct__krb5_cred_enc_part {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_cred_enc_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_cred_enc_part = Struct__krb5_cred_enc_part;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_cred {
    pub magic: krb5_magic,
    pub tickets: *mut *mut krb5_ticket,
    pub enc_part: krb5_enc_data,
    pub enc_part2: *mut krb5_cred_enc_part,
}
impl ::std::clone::Clone for Struct__krb5_cred {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_cred {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_cred = Struct__krb5_cred;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__passwd_phrase_element {
    pub magic: krb5_magic,
    pub passwd: *mut krb5_data,
    pub phrase: *mut krb5_data,
}
impl ::std::clone::Clone for Struct__passwd_phrase_element {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__passwd_phrase_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type passwd_phrase_element = Struct__passwd_phrase_element;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_pwd_data {
    pub magic: krb5_magic,
    pub sequence_count: ::libc::c_int,
    pub element: *mut *mut passwd_phrase_element,
}
impl ::std::clone::Clone for Struct__krb5_pwd_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_pwd_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_pwd_data = Struct__krb5_pwd_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_pa_svr_referral_data {
    pub principal: krb5_principal,
}
impl ::std::clone::Clone for Struct__krb5_pa_svr_referral_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_pa_svr_referral_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_pa_svr_referral_data = Struct__krb5_pa_svr_referral_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_pa_server_referral_data {
    pub referred_realm: *mut krb5_data,
    pub true_principal_name: krb5_principal,
    pub requested_principal_name: krb5_principal,
    pub referral_valid_until: krb5_timestamp,
    pub rep_cksum: krb5_checksum,
}
impl ::std::clone::Clone for Struct__krb5_pa_server_referral_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_pa_server_referral_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_pa_server_referral_data = Struct__krb5_pa_server_referral_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_pa_pac_req {
    pub include_pac: krb5_boolean,
}
impl ::std::clone::Clone for Struct__krb5_pa_pac_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_pa_pac_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_pa_pac_req = Struct__krb5_pa_pac_req;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_krb5_replay_data {
    pub timestamp: krb5_timestamp,
    pub usec: krb5_int32,
    pub seq: krb5_ui_4,
}
impl ::std::clone::Clone for Struct_krb5_replay_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_krb5_replay_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_replay_data = Struct_krb5_replay_data;
pub type krb5_mk_req_checksum_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: krb5_context,
                                               arg2: krb5_auth_context,
                                               arg3: *mut ::libc::c_void,
                                               arg4: *mut *mut krb5_data)
                              -> krb5_error_code>;
pub type krb5_cc_cursor = krb5_pointer;
pub enum Struct__krb5_ccache { }
pub type krb5_ccache = *mut Struct__krb5_ccache;
pub enum Struct__krb5_cc_ops { }
pub type krb5_cc_ops = Struct__krb5_cc_ops;
pub enum Struct__krb5_cccol_cursor { }
pub type krb5_cccol_cursor = *mut Struct__krb5_cccol_cursor;
pub enum Struct_krb5_rc_st { }
pub type krb5_rcache = *mut Struct_krb5_rc_st;
pub type krb5_kt_cursor = krb5_pointer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_krb5_keytab_entry_st {
    pub magic: krb5_magic,
    pub principal: krb5_principal,
    pub timestamp: krb5_timestamp,
    pub vno: krb5_kvno,
    pub key: krb5_keyblock,
}
impl ::std::clone::Clone for Struct_krb5_keytab_entry_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_krb5_keytab_entry_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_keytab_entry = Struct_krb5_keytab_entry_st;
pub enum Struct__krb5_kt { }
pub type krb5_keytab = *mut Struct__krb5_kt;
pub enum Struct_credentials { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_prompt {
    pub prompt: *mut ::libc::c_char,
    pub hidden: ::libc::c_int,
    pub reply: *mut krb5_data,
}
impl ::std::clone::Clone for Struct__krb5_prompt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_prompt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_prompt = Struct__krb5_prompt;
pub type krb5_prompter_fct =
    ::std::option::Option<unsafe extern "C" fn(context: krb5_context,
                                               data: *mut ::libc::c_void,
                                               name: *const ::libc::c_char,
                                               banner: *const ::libc::c_char,
                                               num_prompts: ::libc::c_int,
                                               prompts: *mut krb5_prompt)
                              -> krb5_error_code>;
pub enum Struct_krb5_responder_context_st { }
pub type krb5_responder_context = *mut Struct_krb5_responder_context_st;
pub type krb5_responder_fn =
    ::std::option::Option<unsafe extern "C" fn(ctx: krb5_context,
                                               data: *mut ::libc::c_void,
                                               rctx: krb5_responder_context)
                              -> krb5_error_code>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_responder_otp_tokeninfo {
    pub flags: krb5_flags,
    pub format: krb5_int32,
    pub length: krb5_int32,
    pub vendor: *mut ::libc::c_char,
    pub challenge: *mut ::libc::c_char,
    pub token_id: *mut ::libc::c_char,
    pub alg_id: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct__krb5_responder_otp_tokeninfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_responder_otp_tokeninfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_responder_otp_tokeninfo = Struct__krb5_responder_otp_tokeninfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_responder_otp_challenge {
    pub service: *mut ::libc::c_char,
    pub tokeninfo: *mut *mut krb5_responder_otp_tokeninfo,
}
impl ::std::clone::Clone for Struct__krb5_responder_otp_challenge {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_responder_otp_challenge {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_responder_otp_challenge = Struct__krb5_responder_otp_challenge;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_responder_pkinit_identity {
    pub identity: *mut ::libc::c_char,
    pub token_flags: krb5_int32,
}
impl ::std::clone::Clone for Struct__krb5_responder_pkinit_identity {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_responder_pkinit_identity {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_responder_pkinit_identity =
    Struct__krb5_responder_pkinit_identity;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_responder_pkinit_challenge {
    pub identities: *mut *mut krb5_responder_pkinit_identity,
}
impl ::std::clone::Clone for Struct__krb5_responder_pkinit_challenge {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_responder_pkinit_challenge {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_responder_pkinit_challenge =
    Struct__krb5_responder_pkinit_challenge;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_get_init_creds_opt {
    pub flags: krb5_flags,
    pub tkt_life: krb5_deltat,
    pub renew_life: krb5_deltat,
    pub forwardable: ::libc::c_int,
    pub proxiable: ::libc::c_int,
    pub etype_list: *mut krb5_enctype,
    pub etype_list_length: ::libc::c_int,
    pub address_list: *mut *mut krb5_address,
    pub preauth_list: *mut krb5_preauthtype,
    pub preauth_list_length: ::libc::c_int,
    pub salt: *mut krb5_data,
}
impl ::std::clone::Clone for Struct__krb5_get_init_creds_opt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_get_init_creds_opt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_get_init_creds_opt = Struct__krb5_get_init_creds_opt;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_gic_opt_pa_data {
    pub attr: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct__krb5_gic_opt_pa_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_gic_opt_pa_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_gic_opt_pa_data = Struct__krb5_gic_opt_pa_data;
pub type krb5_expire_callback_func =
    ::std::option::Option<unsafe extern "C" fn(context: krb5_context,
                                               data: *mut ::libc::c_void,
                                               password_expiration:
                                                   krb5_timestamp,
                                               account_expiration:
                                                   krb5_timestamp,
                                               is_last_req: krb5_boolean)
                              -> ()>;
pub enum Struct__krb5_init_creds_context { }
pub type krb5_init_creds_context = *mut Struct__krb5_init_creds_context;
pub enum Struct__krb5_tkt_creds_context { }
pub type krb5_tkt_creds_context = *mut Struct__krb5_tkt_creds_context;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_verify_init_creds_opt {
    pub flags: krb5_flags,
    pub ap_req_nofail: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__krb5_verify_init_creds_opt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_verify_init_creds_opt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_verify_init_creds_opt = Struct__krb5_verify_init_creds_opt;
pub type krb5_prompt_type = krb5_int32;
pub enum Struct_krb5_pac_data { }
pub type krb5_pac = *mut Struct_krb5_pac_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__krb5_trace_info {
    pub message: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct__krb5_trace_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__krb5_trace_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_trace_info = Struct__krb5_trace_info;
pub type krb5_trace_callback =
    ::std::option::Option<unsafe extern "C" fn(context: krb5_context,
                                               info: *const krb5_trace_info,
                                               cb_data: *mut ::libc::c_void)
                              -> ()>;
#[link(name = "krb5")]
#[link(name = "k5crypto")]
#[link(name = "com_err")]
extern "C" {
    pub static et_krb5_error_table: Struct_error_table;
    pub static et_k5e1_error_table: Struct_error_table;
    pub static et_kdb5_error_table: Struct_error_table;
    pub static et_kv5m_error_table: Struct_error_table;
    pub static et_k524_error_table: Struct_error_table;
    pub static et_asn1_error_table: Struct_error_table;
}
#[link(name = "krb5")]
#[link(name = "k5crypto")]
#[link(name = "com_err")]
extern "C" {
    pub fn krb5_is_referral_realm(r: *const krb5_data) -> krb5_boolean;
    pub fn krb5_anonymous_realm() -> *const krb5_data;
    pub fn krb5_anonymous_principal() -> krb5_const_principal;
    pub fn krb5_c_encrypt(context: krb5_context, key: *const krb5_keyblock,
                          usage: krb5_keyusage,
                          cipher_state: *const krb5_data,
                          input: *const krb5_data, output: *mut krb5_enc_data)
     -> krb5_error_code;
    pub fn krb5_c_decrypt(context: krb5_context, key: *const krb5_keyblock,
                          usage: krb5_keyusage,
                          cipher_state: *const krb5_data,
                          input: *const krb5_enc_data, output: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_encrypt_length(context: krb5_context, enctype: krb5_enctype,
                                 inputlen: size_t, length: *mut size_t)
     -> krb5_error_code;
    pub fn krb5_c_block_size(context: krb5_context, enctype: krb5_enctype,
                             blocksize: *mut size_t) -> krb5_error_code;
    pub fn krb5_c_keylengths(context: krb5_context, enctype: krb5_enctype,
                             keybytes: *mut size_t, keylength: *mut size_t)
     -> krb5_error_code;
    pub fn krb5_c_init_state(context: krb5_context, key: *const krb5_keyblock,
                             usage: krb5_keyusage, new_state: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_free_state(context: krb5_context, key: *const krb5_keyblock,
                             state: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_c_prf(context: krb5_context, keyblock: *const krb5_keyblock,
                      input: *mut krb5_data, output: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_prf_length(context: krb5_context, enctype: krb5_enctype,
                             len: *mut size_t) -> krb5_error_code;
    pub fn krb5_c_fx_cf2_simple(context: krb5_context, k1: *mut krb5_keyblock,
                                pepper1: *const ::libc::c_char,
                                k2: *mut krb5_keyblock,
                                pepper2: *const ::libc::c_char,
                                out: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_c_make_random_key(context: krb5_context,
                                  enctype: krb5_enctype,
                                  k5_random_key: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_c_random_to_key(context: krb5_context, enctype: krb5_enctype,
                                random_data: *mut krb5_data,
                                k5_random_key: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_c_random_add_entropy(context: krb5_context,
                                     randsource: ::libc::c_uint,
                                     data: *const krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_random_make_octets(context: krb5_context,
                                     data: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_c_random_os_entropy(context: krb5_context,
                                    strong: ::libc::c_int,
                                    success: *mut ::libc::c_int)
     -> krb5_error_code;
    pub fn krb5_c_random_seed(context: krb5_context, data: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_string_to_key(context: krb5_context, enctype: krb5_enctype,
                                string: *const krb5_data,
                                salt: *const krb5_data,
                                key: *mut krb5_keyblock) -> krb5_error_code;
    pub fn krb5_c_string_to_key_with_params(context: krb5_context,
                                            enctype: krb5_enctype,
                                            string: *const krb5_data,
                                            salt: *const krb5_data,
                                            params: *const krb5_data,
                                            key: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_c_enctype_compare(context: krb5_context, e1: krb5_enctype,
                                  e2: krb5_enctype,
                                  similar: *mut krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_c_make_checksum(context: krb5_context,
                                cksumtype: krb5_cksumtype,
                                key: *const krb5_keyblock,
                                usage: krb5_keyusage, input: *const krb5_data,
                                cksum: *mut krb5_checksum) -> krb5_error_code;
    pub fn krb5_c_verify_checksum(context: krb5_context,
                                  key: *const krb5_keyblock,
                                  usage: krb5_keyusage,
                                  data: *const krb5_data,
                                  cksum: *const krb5_checksum,
                                  valid: *mut krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_c_checksum_length(context: krb5_context,
                                  cksumtype: krb5_cksumtype,
                                  length: *mut size_t) -> krb5_error_code;
    pub fn krb5_c_keyed_checksum_types(context: krb5_context,
                                       enctype: krb5_enctype,
                                       count: *mut ::libc::c_uint,
                                       cksumtypes: *mut *mut krb5_cksumtype)
     -> krb5_error_code;
    pub fn krb5_c_valid_enctype(ktype: krb5_enctype) -> krb5_boolean;
    pub fn krb5_c_valid_cksumtype(ctype: krb5_cksumtype) -> krb5_boolean;
    pub fn krb5_c_is_coll_proof_cksum(ctype: krb5_cksumtype) -> krb5_boolean;
    pub fn krb5_c_is_keyed_cksum(ctype: krb5_cksumtype) -> krb5_boolean;
    pub fn krb5_c_make_checksum_iov(context: krb5_context,
                                    cksumtype: krb5_cksumtype,
                                    key: *const krb5_keyblock,
                                    usage: krb5_keyusage,
                                    data: *mut krb5_crypto_iov,
                                    num_data: size_t) -> krb5_error_code;
    pub fn krb5_c_verify_checksum_iov(context: krb5_context,
                                      cksumtype: krb5_cksumtype,
                                      key: *const krb5_keyblock,
                                      usage: krb5_keyusage,
                                      data: *const krb5_crypto_iov,
                                      num_data: size_t,
                                      valid: *mut krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_c_encrypt_iov(context: krb5_context,
                              keyblock: *const krb5_keyblock,
                              usage: krb5_keyusage,
                              cipher_state: *const krb5_data,
                              data: *mut krb5_crypto_iov, num_data: size_t)
     -> krb5_error_code;
    pub fn krb5_c_decrypt_iov(context: krb5_context,
                              keyblock: *const krb5_keyblock,
                              usage: krb5_keyusage,
                              cipher_state: *const krb5_data,
                              data: *mut krb5_crypto_iov, num_data: size_t)
     -> krb5_error_code;
    pub fn krb5_c_crypto_length(context: krb5_context, enctype: krb5_enctype,
                                _type: krb5_cryptotype,
                                size: *mut ::libc::c_uint) -> krb5_error_code;
    pub fn krb5_c_crypto_length_iov(context: krb5_context,
                                    enctype: krb5_enctype,
                                    data: *mut krb5_crypto_iov,
                                    num_data: size_t) -> krb5_error_code;
    pub fn krb5_c_padding_length(context: krb5_context, enctype: krb5_enctype,
                                 data_length: size_t,
                                 size: *mut ::libc::c_uint)
     -> krb5_error_code;
    pub fn krb5_k_create_key(context: krb5_context,
                             key_data: *const krb5_keyblock,
                             out: *mut krb5_key) -> krb5_error_code;
    pub fn krb5_k_reference_key(context: krb5_context, key: krb5_key) -> ();
    pub fn krb5_k_free_key(context: krb5_context, key: krb5_key) -> ();
    pub fn krb5_k_key_keyblock(context: krb5_context, key: krb5_key,
                               key_data: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_k_key_enctype(context: krb5_context, key: krb5_key)
     -> krb5_enctype;
    pub fn krb5_k_encrypt(context: krb5_context, key: krb5_key,
                          usage: krb5_keyusage,
                          cipher_state: *const krb5_data,
                          input: *const krb5_data, output: *mut krb5_enc_data)
     -> krb5_error_code;
    pub fn krb5_k_encrypt_iov(context: krb5_context, key: krb5_key,
                              usage: krb5_keyusage,
                              cipher_state: *const krb5_data,
                              data: *mut krb5_crypto_iov, num_data: size_t)
     -> krb5_error_code;
    pub fn krb5_k_decrypt(context: krb5_context, key: krb5_key,
                          usage: krb5_keyusage,
                          cipher_state: *const krb5_data,
                          input: *const krb5_enc_data, output: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_k_decrypt_iov(context: krb5_context, key: krb5_key,
                              usage: krb5_keyusage,
                              cipher_state: *const krb5_data,
                              data: *mut krb5_crypto_iov, num_data: size_t)
     -> krb5_error_code;
    pub fn krb5_k_make_checksum(context: krb5_context,
                                cksumtype: krb5_cksumtype, key: krb5_key,
                                usage: krb5_keyusage, input: *const krb5_data,
                                cksum: *mut krb5_checksum) -> krb5_error_code;
    pub fn krb5_k_make_checksum_iov(context: krb5_context,
                                    cksumtype: krb5_cksumtype, key: krb5_key,
                                    usage: krb5_keyusage,
                                    data: *mut krb5_crypto_iov,
                                    num_data: size_t) -> krb5_error_code;
    pub fn krb5_k_verify_checksum(context: krb5_context, key: krb5_key,
                                  usage: krb5_keyusage,
                                  data: *const krb5_data,
                                  cksum: *const krb5_checksum,
                                  valid: *mut krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_k_verify_checksum_iov(context: krb5_context,
                                      cksumtype: krb5_cksumtype,
                                      key: krb5_key, usage: krb5_keyusage,
                                      data: *const krb5_crypto_iov,
                                      num_data: size_t,
                                      valid: *mut krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_k_prf(context: krb5_context, key: krb5_key,
                      input: *mut krb5_data, output: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_encrypt(context: krb5_context, inptr: krb5_const_pointer,
                        outptr: krb5_pointer, size: size_t,
                        eblock: *mut krb5_encrypt_block, ivec: krb5_pointer)
     -> krb5_error_code;
    pub fn krb5_decrypt(context: krb5_context, inptr: krb5_const_pointer,
                        outptr: krb5_pointer, size: size_t,
                        eblock: *mut krb5_encrypt_block, ivec: krb5_pointer)
     -> krb5_error_code;
    pub fn krb5_process_key(context: krb5_context,
                            eblock: *mut krb5_encrypt_block,
                            key: *const krb5_keyblock) -> krb5_error_code;
    pub fn krb5_finish_key(context: krb5_context,
                           eblock: *mut krb5_encrypt_block)
     -> krb5_error_code;
    pub fn krb5_string_to_key(context: krb5_context,
                              eblock: *const krb5_encrypt_block,
                              keyblock: *mut krb5_keyblock,
                              data: *const krb5_data, salt: *const krb5_data)
     -> krb5_error_code;
    pub fn krb5_init_random_key(context: krb5_context,
                                eblock: *const krb5_encrypt_block,
                                keyblock: *const krb5_keyblock,
                                ptr: *mut krb5_pointer) -> krb5_error_code;
    pub fn krb5_finish_random_key(context: krb5_context,
                                  eblock: *const krb5_encrypt_block,
                                  ptr: *mut krb5_pointer) -> krb5_error_code;
    pub fn krb5_random_key(context: krb5_context,
                           eblock: *const krb5_encrypt_block,
                           ptr: krb5_pointer,
                           keyblock: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_eblock_enctype(context: krb5_context,
                               eblock: *const krb5_encrypt_block)
     -> krb5_enctype;
    pub fn krb5_use_enctype(context: krb5_context,
                            eblock: *mut krb5_encrypt_block,
                            enctype: krb5_enctype) -> krb5_error_code;
    pub fn krb5_encrypt_size(length: size_t, crypto: krb5_enctype) -> size_t;
    pub fn krb5_checksum_size(context: krb5_context, ctype: krb5_cksumtype)
     -> size_t;
    pub fn krb5_calculate_checksum(context: krb5_context,
                                   ctype: krb5_cksumtype,
                                   _in: krb5_const_pointer, in_length: size_t,
                                   seed: krb5_const_pointer,
                                   seed_length: size_t,
                                   outcksum: *mut krb5_checksum)
     -> krb5_error_code;
    pub fn krb5_verify_checksum(context: krb5_context, ctype: krb5_cksumtype,
                                cksum: *const krb5_checksum,
                                _in: krb5_const_pointer, in_length: size_t,
                                seed: krb5_const_pointer, seed_length: size_t)
     -> krb5_error_code;
    pub fn krb5_cc_get_name(context: krb5_context, cache: krb5_ccache)
     -> *const ::libc::c_char;
    pub fn krb5_cc_get_full_name(context: krb5_context, cache: krb5_ccache,
                                 fullname_out: *mut *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_cc_initialize(context: krb5_context, cache: krb5_ccache,
                              principal: krb5_principal) -> krb5_error_code;
    pub fn krb5_cc_destroy(context: krb5_context, cache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_close(context: krb5_context, cache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_store_cred(context: krb5_context, cache: krb5_ccache,
                              creds: *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_cc_retrieve_cred(context: krb5_context, cache: krb5_ccache,
                                 flags: krb5_flags, mcreds: *mut krb5_creds,
                                 creds: *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_cc_get_principal(context: krb5_context, cache: krb5_ccache,
                                 principal: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_cc_start_seq_get(context: krb5_context, cache: krb5_ccache,
                                 cursor: *mut krb5_cc_cursor)
     -> krb5_error_code;
    pub fn krb5_cc_next_cred(context: krb5_context, cache: krb5_ccache,
                             cursor: *mut krb5_cc_cursor,
                             creds: *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_cc_end_seq_get(context: krb5_context, cache: krb5_ccache,
                               cursor: *mut krb5_cc_cursor)
     -> krb5_error_code;
    pub fn krb5_cc_remove_cred(context: krb5_context, cache: krb5_ccache,
                               flags: krb5_flags, creds: *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_cc_set_flags(context: krb5_context, cache: krb5_ccache,
                             flags: krb5_flags) -> krb5_error_code;
    pub fn krb5_cc_get_flags(context: krb5_context, cache: krb5_ccache,
                             flags: *mut krb5_flags) -> krb5_error_code;
    pub fn krb5_cc_get_type(context: krb5_context, cache: krb5_ccache)
     -> *const ::libc::c_char;
    pub fn krb5_cc_move(context: krb5_context, src: krb5_ccache,
                        dst: krb5_ccache) -> krb5_error_code;
    pub fn krb5_cc_last_change_time(context: krb5_context,
                                    ccache: krb5_ccache,
                                    change_time: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_cc_lock(context: krb5_context, ccache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_unlock(context: krb5_context, ccache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cccol_cursor_new(context: krb5_context,
                                 cursor: *mut krb5_cccol_cursor)
     -> krb5_error_code;
    pub fn krb5_cccol_cursor_next(context: krb5_context,
                                  cursor: krb5_cccol_cursor,
                                  ccache: *mut krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cccol_cursor_free(context: krb5_context,
                                  cursor: *mut krb5_cccol_cursor)
     -> krb5_error_code;
    pub fn krb5_cccol_have_content(context: krb5_context) -> krb5_error_code;
    pub fn krb5_cccol_last_change_time(context: krb5_context,
                                       change_time: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_cccol_lock(context: krb5_context) -> krb5_error_code;
    pub fn krb5_cccol_unlock(context: krb5_context) -> krb5_error_code;
    pub fn krb5_cc_new_unique(context: krb5_context,
                              _type: *const ::libc::c_char,
                              hint: *const ::libc::c_char,
                              id: *mut krb5_ccache) -> krb5_error_code;
    pub fn krb5_kt_get_type(context: krb5_context, keytab: krb5_keytab)
     -> *const ::libc::c_char;
    pub fn krb5_kt_get_name(context: krb5_context, keytab: krb5_keytab,
                            name: *mut ::libc::c_char,
                            namelen: ::libc::c_uint) -> krb5_error_code;
    pub fn krb5_kt_close(context: krb5_context, keytab: krb5_keytab)
     -> krb5_error_code;
    pub fn krb5_kt_get_entry(context: krb5_context, keytab: krb5_keytab,
                             principal: krb5_const_principal, vno: krb5_kvno,
                             enctype: krb5_enctype,
                             entry: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_kt_start_seq_get(context: krb5_context, keytab: krb5_keytab,
                                 cursor: *mut krb5_kt_cursor)
     -> krb5_error_code;
    pub fn krb5_kt_next_entry(context: krb5_context, keytab: krb5_keytab,
                              entry: *mut krb5_keytab_entry,
                              cursor: *mut krb5_kt_cursor) -> krb5_error_code;
    pub fn krb5_kt_end_seq_get(context: krb5_context, keytab: krb5_keytab,
                               cursor: *mut krb5_kt_cursor)
     -> krb5_error_code;
    pub fn krb5_kt_have_content(context: krb5_context, keytab: krb5_keytab)
     -> krb5_error_code;
    pub fn krb5_init_context(context: *mut krb5_context) -> krb5_error_code;
    pub fn krb5_init_secure_context(context: *mut krb5_context)
     -> krb5_error_code;
    pub fn krb5_init_context_profile(profile: *mut Struct__profile_t,
                                     flags: krb5_flags,
                                     context: *mut krb5_context)
     -> krb5_error_code;
    pub fn krb5_free_context(context: krb5_context) -> ();
    pub fn krb5_copy_context(ctx: krb5_context, nctx_out: *mut krb5_context)
     -> krb5_error_code;
    pub fn krb5_set_default_tgs_enctypes(context: krb5_context,
                                         etypes: *const krb5_enctype)
     -> krb5_error_code;
    pub fn krb5_get_permitted_enctypes(context: krb5_context,
                                       ktypes: *mut *mut krb5_enctype)
     -> krb5_error_code;
    pub fn krb5_is_thread_safe() -> krb5_boolean;
    pub fn krb5_server_decrypt_ticket_keytab(context: krb5_context,
                                             kt: krb5_keytab,
                                             ticket: *mut krb5_ticket)
     -> krb5_error_code;
    pub fn krb5_free_tgt_creds(context: krb5_context,
                               tgts: *mut *mut krb5_creds) -> ();
    pub fn krb5_get_credentials(context: krb5_context, options: krb5_flags,
                                ccache: krb5_ccache,
                                in_creds: *mut krb5_creds,
                                out_creds: *mut *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_get_credentials_validate(context: krb5_context,
                                         options: krb5_flags,
                                         ccache: krb5_ccache,
                                         in_creds: *mut krb5_creds,
                                         out_creds: *mut *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_get_credentials_renew(context: krb5_context,
                                      options: krb5_flags,
                                      ccache: krb5_ccache,
                                      in_creds: *mut krb5_creds,
                                      out_creds: *mut *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_mk_req(context: krb5_context,
                       auth_context: *mut krb5_auth_context,
                       ap_req_options: krb5_flags,
                       service: *mut ::libc::c_char,
                       hostname: *mut ::libc::c_char, in_data: *mut krb5_data,
                       ccache: krb5_ccache, outbuf: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_mk_req_extended(context: krb5_context,
                                auth_context: *mut krb5_auth_context,
                                ap_req_options: krb5_flags,
                                in_data: *mut krb5_data,
                                in_creds: *mut krb5_creds,
                                outbuf: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_mk_rep(context: krb5_context, auth_context: krb5_auth_context,
                       outbuf: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_mk_rep_dce(context: krb5_context,
                           auth_context: krb5_auth_context,
                           outbuf: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_rd_rep(context: krb5_context, auth_context: krb5_auth_context,
                       inbuf: *const krb5_data,
                       repl: *mut *mut krb5_ap_rep_enc_part)
     -> krb5_error_code;
    pub fn krb5_rd_rep_dce(context: krb5_context,
                           auth_context: krb5_auth_context,
                           inbuf: *const krb5_data, nonce: *mut krb5_ui_4)
     -> krb5_error_code;
    pub fn krb5_mk_error(context: krb5_context, dec_err: *const krb5_error,
                         enc_err: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_rd_error(context: krb5_context, enc_errbuf: *const krb5_data,
                         dec_error: *mut *mut krb5_error) -> krb5_error_code;
    pub fn krb5_rd_safe(context: krb5_context,
                        auth_context: krb5_auth_context,
                        inbuf: *const krb5_data, outbuf: *mut krb5_data,
                        outdata: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_rd_priv(context: krb5_context,
                        auth_context: krb5_auth_context,
                        inbuf: *const krb5_data, outbuf: *mut krb5_data,
                        outdata: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_parse_name(context: krb5_context, name: *const ::libc::c_char,
                           principal_out: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_parse_name_flags(context: krb5_context,
                                 name: *const ::libc::c_char,
                                 flags: ::libc::c_int,
                                 principal_out: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_unparse_name(context: krb5_context,
                             principal: krb5_const_principal,
                             name: *mut *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_unparse_name_ext(context: krb5_context,
                                 principal: krb5_const_principal,
                                 name: *mut *mut ::libc::c_char,
                                 size: *mut ::libc::c_uint)
     -> krb5_error_code;
    pub fn krb5_unparse_name_flags(context: krb5_context,
                                   principal: krb5_const_principal,
                                   flags: ::libc::c_int,
                                   name: *mut *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_unparse_name_flags_ext(context: krb5_context,
                                       principal: krb5_const_principal,
                                       flags: ::libc::c_int,
                                       name: *mut *mut ::libc::c_char,
                                       size: *mut ::libc::c_uint)
     -> krb5_error_code;
    pub fn krb5_set_principal_realm(context: krb5_context,
                                    principal: krb5_principal,
                                    realm: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_address_search(context: krb5_context,
                               addr: *const krb5_address,
                               addrlist: *const *mut krb5_address)
     -> krb5_boolean;
    pub fn krb5_address_compare(context: krb5_context,
                                addr1: *const krb5_address,
                                addr2: *const krb5_address) -> krb5_boolean;
    pub fn krb5_address_order(context: krb5_context,
                              addr1: *const krb5_address,
                              addr2: *const krb5_address) -> ::libc::c_int;
    pub fn krb5_realm_compare(context: krb5_context,
                              princ1: krb5_const_principal,
                              princ2: krb5_const_principal) -> krb5_boolean;
    pub fn krb5_principal_compare(context: krb5_context,
                                  princ1: krb5_const_principal,
                                  princ2: krb5_const_principal)
     -> krb5_boolean;
    pub fn krb5_principal_compare_any_realm(context: krb5_context,
                                            princ1: krb5_const_principal,
                                            princ2: krb5_const_principal)
     -> krb5_boolean;
    pub fn krb5_principal_compare_flags(context: krb5_context,
                                        princ1: krb5_const_principal,
                                        princ2: krb5_const_principal,
                                        flags: ::libc::c_int) -> krb5_boolean;
    pub fn krb5_init_keyblock(context: krb5_context, enctype: krb5_enctype,
                              length: size_t, out: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_copy_keyblock(context: krb5_context,
                              from: *const krb5_keyblock,
                              to: *mut *mut krb5_keyblock) -> krb5_error_code;
    pub fn krb5_copy_keyblock_contents(context: krb5_context,
                                       from: *const krb5_keyblock,
                                       to: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_copy_creds(context: krb5_context, incred: *const krb5_creds,
                           outcred: *mut *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_copy_data(context: krb5_context, indata: *const krb5_data,
                          outdata: *mut *mut krb5_data) -> krb5_error_code;
    pub fn krb5_copy_principal(context: krb5_context,
                               inprinc: krb5_const_principal,
                               outprinc: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_copy_addresses(context: krb5_context,
                               inaddr: *const *mut krb5_address,
                               outaddr: *mut *mut *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_copy_ticket(context: krb5_context, from: *const krb5_ticket,
                            pto: *mut *mut krb5_ticket) -> krb5_error_code;
    pub fn krb5_copy_authdata(context: krb5_context,
                              in_authdat: *const *mut krb5_authdata,
                              out: *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_find_authdata(context: krb5_context,
                              ticket_authdata: *const *mut krb5_authdata,
                              ap_req_authdata: *const *mut krb5_authdata,
                              ad_type: krb5_authdatatype,
                              results: *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_merge_authdata(context: krb5_context,
                               inauthdat1: *const *mut krb5_authdata,
                               inauthdat2: *const *mut krb5_authdata,
                               outauthdat: *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_copy_authenticator(context: krb5_context,
                                   authfrom: *const krb5_authenticator,
                                   authto: *mut *mut krb5_authenticator)
     -> krb5_error_code;
    pub fn krb5_copy_checksum(context: krb5_context,
                              ckfrom: *const krb5_checksum,
                              ckto: *mut *mut krb5_checksum)
     -> krb5_error_code;
    pub fn krb5_get_server_rcache(context: krb5_context,
                                  piece: *const krb5_data,
                                  rcptr: *mut krb5_rcache) -> krb5_error_code;
    pub fn krb5_build_principal_ext(context: krb5_context,
                                    princ: *mut krb5_principal,
                                    rlen: ::libc::c_uint,
                                    realm: *const ::libc::c_char, ...)
     -> krb5_error_code;
    pub fn krb5_build_principal(context: krb5_context,
                                princ: *mut krb5_principal,
                                rlen: ::libc::c_uint,
                                realm: *const ::libc::c_char, ...)
     -> krb5_error_code;
    pub fn krb5_build_principal_alloc_va(context: krb5_context,
                                         princ: *mut krb5_principal,
                                         rlen: ::libc::c_uint,
                                         realm: *const ::libc::c_char,
                                         ap: va_list) -> krb5_error_code;
    pub fn krb5_425_conv_principal(context: krb5_context,
                                   name: *const ::libc::c_char,
                                   instance: *const ::libc::c_char,
                                   realm: *const ::libc::c_char,
                                   princ: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_524_conv_principal(context: krb5_context,
                                   princ: krb5_const_principal,
                                   name: *mut ::libc::c_char,
                                   inst: *mut ::libc::c_char,
                                   realm: *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_524_convert_creds(context: krb5_context,
                                  v5creds: *mut krb5_creds,
                                  v4creds: *mut Struct_credentials)
     -> ::libc::c_int;
    pub fn krb5_kt_resolve(context: krb5_context, name: *const ::libc::c_char,
                           ktid: *mut krb5_keytab) -> krb5_error_code;
    pub fn krb5_kt_dup(context: krb5_context, _in: krb5_keytab,
                       out: *mut krb5_keytab) -> krb5_error_code;
    pub fn krb5_kt_default_name(context: krb5_context,
                                name: *mut ::libc::c_char,
                                name_size: ::libc::c_int) -> krb5_error_code;
    pub fn krb5_kt_default(context: krb5_context, id: *mut krb5_keytab)
     -> krb5_error_code;
    pub fn krb5_kt_client_default(context: krb5_context,
                                  keytab_out: *mut krb5_keytab)
     -> krb5_error_code;
    pub fn krb5_free_keytab_entry_contents(context: krb5_context,
                                           entry: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_kt_free_entry(context: krb5_context,
                              entry: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_kt_remove_entry(context: krb5_context, id: krb5_keytab,
                                entry: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_kt_add_entry(context: krb5_context, id: krb5_keytab,
                             entry: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_principal2salt(context: krb5_context,
                               pr: krb5_const_principal, ret: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_cc_resolve(context: krb5_context, name: *const ::libc::c_char,
                           cache: *mut krb5_ccache) -> krb5_error_code;
    pub fn krb5_cc_dup(context: krb5_context, _in: krb5_ccache,
                       out: *mut krb5_ccache) -> krb5_error_code;
    pub fn krb5_cc_default_name(context: krb5_context)
     -> *const ::libc::c_char;
    pub fn krb5_cc_set_default_name(context: krb5_context,
                                    name: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_cc_default(context: krb5_context, ccache: *mut krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_copy_creds(context: krb5_context, incc: krb5_ccache,
                              outcc: krb5_ccache) -> krb5_error_code;
    pub fn krb5_cc_get_config(context: krb5_context, id: krb5_ccache,
                              principal: krb5_const_principal,
                              key: *const ::libc::c_char,
                              data: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_cc_set_config(context: krb5_context, id: krb5_ccache,
                              principal: krb5_const_principal,
                              key: *const ::libc::c_char,
                              data: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_is_config_principal(context: krb5_context,
                                    principal: krb5_const_principal)
     -> krb5_boolean;
    pub fn krb5_cc_switch(context: krb5_context, cache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_support_switch(context: krb5_context,
                                  _type: *const ::libc::c_char)
     -> krb5_boolean;
    pub fn krb5_cc_cache_match(context: krb5_context, client: krb5_principal,
                               cache_out: *mut krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_select(context: krb5_context, server: krb5_principal,
                          cache_out: *mut krb5_ccache,
                          princ_out: *mut krb5_principal) -> krb5_error_code;
    pub fn krb5_free_principal(context: krb5_context, val: krb5_principal)
     -> ();
    pub fn krb5_free_authenticator(context: krb5_context,
                                   val: *mut krb5_authenticator) -> ();
    pub fn krb5_free_addresses(context: krb5_context,
                               val: *mut *mut krb5_address) -> ();
    pub fn krb5_free_authdata(context: krb5_context,
                              val: *mut *mut krb5_authdata) -> ();
    pub fn krb5_free_ticket(context: krb5_context, val: *mut krb5_ticket)
     -> ();
    pub fn krb5_free_error(context: krb5_context, val: *mut krb5_error) -> ();
    pub fn krb5_free_creds(context: krb5_context, val: *mut krb5_creds) -> ();
    pub fn krb5_free_cred_contents(context: krb5_context,
                                   val: *mut krb5_creds) -> ();
    pub fn krb5_free_checksum(context: krb5_context, val: *mut krb5_checksum)
     -> ();
    pub fn krb5_free_checksum_contents(context: krb5_context,
                                       val: *mut krb5_checksum) -> ();
    pub fn krb5_free_keyblock(context: krb5_context, val: *mut krb5_keyblock)
     -> ();
    pub fn krb5_free_keyblock_contents(context: krb5_context,
                                       key: *mut krb5_keyblock) -> ();
    pub fn krb5_free_ap_rep_enc_part(context: krb5_context,
                                     val: *mut krb5_ap_rep_enc_part) -> ();
    pub fn krb5_free_data(context: krb5_context, val: *mut krb5_data) -> ();
    pub fn krb5_free_octet_data(context: krb5_context,
                                val: *mut krb5_octet_data) -> ();
    pub fn krb5_free_data_contents(context: krb5_context, val: *mut krb5_data)
     -> ();
    pub fn krb5_free_unparsed_name(context: krb5_context,
                                   val: *mut ::libc::c_char) -> ();
    pub fn krb5_free_string(context: krb5_context, val: *mut ::libc::c_char)
     -> ();
    pub fn krb5_free_enctypes(context: krb5_context, val: *mut krb5_enctype)
     -> ();
    pub fn krb5_free_cksumtypes(context: krb5_context,
                                val: *mut krb5_cksumtype) -> ();
    pub fn krb5_us_timeofday(context: krb5_context,
                             seconds: *mut krb5_timestamp,
                             microseconds: *mut krb5_int32)
     -> krb5_error_code;
    pub fn krb5_timeofday(context: krb5_context, timeret: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_check_clockskew(context: krb5_context, date: krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_os_localaddr(context: krb5_context,
                             addr: *mut *mut *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_get_default_realm(context: krb5_context,
                                  lrealm: *mut *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_set_default_realm(context: krb5_context,
                                  lrealm: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_free_default_realm(context: krb5_context,
                                   lrealm: *mut ::libc::c_char) -> ();
    pub fn krb5_sname_to_principal(context: krb5_context,
                                   hostname: *const ::libc::c_char,
                                   sname: *const ::libc::c_char,
                                   _type: krb5_int32,
                                   ret_princ: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_sname_match(context: krb5_context,
                            matching: krb5_const_principal,
                            princ: krb5_const_principal) -> krb5_boolean;
    pub fn krb5_change_password(context: krb5_context, creds: *mut krb5_creds,
                                newpw: *mut ::libc::c_char,
                                result_code: *mut ::libc::c_int,
                                result_code_string: *mut krb5_data,
                                result_string: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_set_password(context: krb5_context, creds: *mut krb5_creds,
                             newpw: *mut ::libc::c_char,
                             change_password_for: krb5_principal,
                             result_code: *mut ::libc::c_int,
                             result_code_string: *mut krb5_data,
                             result_string: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_set_password_using_ccache(context: krb5_context,
                                          ccache: krb5_ccache,
                                          newpw: *mut ::libc::c_char,
                                          change_password_for: krb5_principal,
                                          result_code: *mut ::libc::c_int,
                                          result_code_string: *mut krb5_data,
                                          result_string: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_chpw_message(context: krb5_context,
                             server_string: *const krb5_data,
                             message_out: *mut *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_get_profile(context: krb5_context,
                            profile: *mut *mut Struct__profile_t)
     -> krb5_error_code;
    pub fn krb5_rd_req(context: krb5_context,
                       auth_context: *mut krb5_auth_context,
                       inbuf: *const krb5_data, server: krb5_const_principal,
                       keytab: krb5_keytab, ap_req_options: *mut krb5_flags,
                       ticket: *mut *mut krb5_ticket) -> krb5_error_code;
    pub fn krb5_kt_read_service_key(context: krb5_context,
                                    keyprocarg: krb5_pointer,
                                    principal: krb5_principal, vno: krb5_kvno,
                                    enctype: krb5_enctype,
                                    key: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_mk_safe(context: krb5_context,
                        auth_context: krb5_auth_context,
                        userdata: *const krb5_data, outbuf: *mut krb5_data,
                        outdata: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_mk_priv(context: krb5_context,
                        auth_context: krb5_auth_context,
                        userdata: *const krb5_data, outbuf: *mut krb5_data,
                        outdata: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_sendauth(context: krb5_context,
                         auth_context: *mut krb5_auth_context,
                         fd: krb5_pointer, appl_version: *mut ::libc::c_char,
                         client: krb5_principal, server: krb5_principal,
                         ap_req_options: krb5_flags, in_data: *mut krb5_data,
                         in_creds: *mut krb5_creds, ccache: krb5_ccache,
                         error: *mut *mut krb5_error,
                         rep_result: *mut *mut krb5_ap_rep_enc_part,
                         out_creds: *mut *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_recvauth(context: krb5_context,
                         auth_context: *mut krb5_auth_context,
                         fd: krb5_pointer, appl_version: *mut ::libc::c_char,
                         server: krb5_principal, flags: krb5_int32,
                         keytab: krb5_keytab, ticket: *mut *mut krb5_ticket)
     -> krb5_error_code;
    pub fn krb5_recvauth_version(context: krb5_context,
                                 auth_context: *mut krb5_auth_context,
                                 fd: krb5_pointer, server: krb5_principal,
                                 flags: krb5_int32, keytab: krb5_keytab,
                                 ticket: *mut *mut krb5_ticket,
                                 version: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_mk_ncred(context: krb5_context,
                         auth_context: krb5_auth_context,
                         ppcreds: *mut *mut krb5_creds,
                         ppdata: *mut *mut krb5_data,
                         outdata: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_mk_1cred(context: krb5_context,
                         auth_context: krb5_auth_context,
                         pcreds: *mut krb5_creds, ppdata: *mut *mut krb5_data,
                         outdata: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_rd_cred(context: krb5_context,
                        auth_context: krb5_auth_context,
                        pcreddata: *mut krb5_data,
                        pppcreds: *mut *mut *mut krb5_creds,
                        outdata: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_fwd_tgt_creds(context: krb5_context,
                              auth_context: krb5_auth_context,
                              rhost: *mut ::libc::c_char,
                              client: krb5_principal, server: krb5_principal,
                              cc: krb5_ccache, forwardable: ::libc::c_int,
                              outbuf: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_auth_con_init(context: krb5_context,
                              auth_context: *mut krb5_auth_context)
     -> krb5_error_code;
    pub fn krb5_auth_con_free(context: krb5_context,
                              auth_context: krb5_auth_context)
     -> krb5_error_code;
    pub fn krb5_auth_con_setflags(context: krb5_context,
                                  auth_context: krb5_auth_context,
                                  flags: krb5_int32) -> krb5_error_code;
    pub fn krb5_auth_con_getflags(context: krb5_context,
                                  auth_context: krb5_auth_context,
                                  flags: *mut krb5_int32) -> krb5_error_code;
    pub fn krb5_auth_con_set_checksum_func(context: krb5_context,
                                           auth_context: krb5_auth_context,
                                           func: krb5_mk_req_checksum_func,
                                           data: *mut ::libc::c_void)
     -> krb5_error_code;
    pub fn krb5_auth_con_get_checksum_func(context: krb5_context,
                                           auth_context: krb5_auth_context,
                                           func:
                                               *mut krb5_mk_req_checksum_func,
                                           data: *mut *mut ::libc::c_void)
     -> krb5_error_code;
    pub fn krb5_auth_con_setaddrs(context: krb5_context,
                                  auth_context: krb5_auth_context,
                                  local_addr: *mut krb5_address,
                                  remote_addr: *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_auth_con_getaddrs(context: krb5_context,
                                  auth_context: krb5_auth_context,
                                  local_addr: *mut *mut krb5_address,
                                  remote_addr: *mut *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_auth_con_setports(context: krb5_context,
                                  auth_context: krb5_auth_context,
                                  local_port: *mut krb5_address,
                                  remote_port: *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_auth_con_setuseruserkey(context: krb5_context,
                                        auth_context: krb5_auth_context,
                                        keyblock: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getkey(context: krb5_context,
                                auth_context: krb5_auth_context,
                                keyblock: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getkey_k(context: krb5_context,
                                  auth_context: krb5_auth_context,
                                  key: *mut krb5_key) -> krb5_error_code;
    pub fn krb5_auth_con_getsendsubkey(ctx: krb5_context,
                                       ac: krb5_auth_context,
                                       keyblock: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getsendsubkey_k(ctx: krb5_context,
                                         ac: krb5_auth_context,
                                         key: *mut krb5_key)
     -> krb5_error_code;
    pub fn krb5_auth_con_getrecvsubkey(ctx: krb5_context,
                                       ac: krb5_auth_context,
                                       keyblock: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getrecvsubkey_k(ctx: krb5_context,
                                         ac: krb5_auth_context,
                                         key: *mut krb5_key)
     -> krb5_error_code;
    pub fn krb5_auth_con_setsendsubkey(ctx: krb5_context,
                                       ac: krb5_auth_context,
                                       keyblock: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_setsendsubkey_k(ctx: krb5_context,
                                         ac: krb5_auth_context, key: krb5_key)
     -> krb5_error_code;
    pub fn krb5_auth_con_setrecvsubkey(ctx: krb5_context,
                                       ac: krb5_auth_context,
                                       keyblock: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_setrecvsubkey_k(ctx: krb5_context,
                                         ac: krb5_auth_context, key: krb5_key)
     -> krb5_error_code;
    pub fn krb5_auth_con_getlocalseqnumber(context: krb5_context,
                                           auth_context: krb5_auth_context,
                                           seqnumber: *mut krb5_int32)
     -> krb5_error_code;
    pub fn krb5_auth_con_getremoteseqnumber(context: krb5_context,
                                            auth_context: krb5_auth_context,
                                            seqnumber: *mut krb5_int32)
     -> krb5_error_code;
    pub fn krb5_auth_con_setrcache(context: krb5_context,
                                   auth_context: krb5_auth_context,
                                   rcache: krb5_rcache) -> krb5_error_code;
    pub fn krb5_auth_con_getrcache(context: krb5_context,
                                   auth_context: krb5_auth_context,
                                   rcache: *mut krb5_rcache)
     -> krb5_error_code;
    pub fn krb5_auth_con_getauthenticator(context: krb5_context,
                                          auth_context: krb5_auth_context,
                                          authenticator:
                                              *mut *mut krb5_authenticator)
     -> krb5_error_code;
    pub fn krb5_auth_con_set_req_cksumtype(context: krb5_context,
                                           auth_context: krb5_auth_context,
                                           cksumtype: krb5_cksumtype)
     -> krb5_error_code;
    pub fn krb5_read_password(context: krb5_context,
                              prompt: *const ::libc::c_char,
                              prompt2: *const ::libc::c_char,
                              return_pwd: *mut ::libc::c_char,
                              size_return: *mut ::libc::c_uint)
     -> krb5_error_code;
    pub fn krb5_aname_to_localname(context: krb5_context,
                                   aname: krb5_const_principal,
                                   lnsize_in: ::libc::c_int,
                                   lname: *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_get_host_realm(context: krb5_context,
                               host: *const ::libc::c_char,
                               realmsp: *mut *mut *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_get_fallback_host_realm(context: krb5_context,
                                        hdata: *mut krb5_data,
                                        realmsp:
                                            *mut *mut *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_free_host_realm(context: krb5_context,
                                realmlist: *const *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_kuserok(context: krb5_context, principal: krb5_principal,
                        luser: *const ::libc::c_char) -> krb5_boolean;
    pub fn krb5_auth_con_genaddrs(context: krb5_context,
                                  auth_context: krb5_auth_context,
                                  infd: ::libc::c_int, flags: ::libc::c_int)
     -> krb5_error_code;
    pub fn krb5_set_real_time(context: krb5_context, seconds: krb5_timestamp,
                              microseconds: krb5_int32) -> krb5_error_code;
    pub fn krb5_get_time_offsets(context: krb5_context,
                                 seconds: *mut krb5_timestamp,
                                 microseconds: *mut krb5_int32)
     -> krb5_error_code;
    pub fn krb5_string_to_enctype(string: *mut ::libc::c_char,
                                  enctypep: *mut krb5_enctype)
     -> krb5_error_code;
    pub fn krb5_string_to_salttype(string: *mut ::libc::c_char,
                                   salttypep: *mut krb5_int32)
     -> krb5_error_code;
    pub fn krb5_string_to_cksumtype(string: *mut ::libc::c_char,
                                    cksumtypep: *mut krb5_cksumtype)
     -> krb5_error_code;
    pub fn krb5_string_to_timestamp(string: *mut ::libc::c_char,
                                    timestampp: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_string_to_deltat(string: *mut ::libc::c_char,
                                 deltatp: *mut krb5_deltat)
     -> krb5_error_code;
    pub fn krb5_enctype_to_string(enctype: krb5_enctype,
                                  buffer: *mut ::libc::c_char, buflen: size_t)
     -> krb5_error_code;
    pub fn krb5_enctype_to_name(enctype: krb5_enctype, shortest: krb5_boolean,
                                buffer: *mut ::libc::c_char, buflen: size_t)
     -> krb5_error_code;
    pub fn krb5_salttype_to_string(salttype: krb5_int32,
                                   buffer: *mut ::libc::c_char,
                                   buflen: size_t) -> krb5_error_code;
    pub fn krb5_cksumtype_to_string(cksumtype: krb5_cksumtype,
                                    buffer: *mut ::libc::c_char,
                                    buflen: size_t) -> krb5_error_code;
    pub fn krb5_timestamp_to_string(timestamp: krb5_timestamp,
                                    buffer: *mut ::libc::c_char,
                                    buflen: size_t) -> krb5_error_code;
    pub fn krb5_timestamp_to_sfstring(timestamp: krb5_timestamp,
                                      buffer: *mut ::libc::c_char,
                                      buflen: size_t,
                                      pad: *mut ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_deltat_to_string(deltat: krb5_deltat,
                                 buffer: *mut ::libc::c_char, buflen: size_t)
     -> krb5_error_code;
    pub fn krb5_prompter_posix(context: krb5_context,
                               data: *mut ::libc::c_void,
                               name: *const ::libc::c_char,
                               banner: *const ::libc::c_char,
                               num_prompts: ::libc::c_int,
                               prompts: *mut krb5_prompt) -> krb5_error_code;
    pub fn krb5_responder_list_questions(ctx: krb5_context,
                                         rctx: krb5_responder_context)
     -> *const *const ::libc::c_char;
    pub fn krb5_responder_get_challenge(ctx: krb5_context,
                                        rctx: krb5_responder_context,
                                        question: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn krb5_responder_set_answer(ctx: krb5_context,
                                     rctx: krb5_responder_context,
                                     question: *const ::libc::c_char,
                                     answer: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_responder_otp_get_challenge(ctx: krb5_context,
                                            rctx: krb5_responder_context,
                                            chl:
                                                *mut *mut krb5_responder_otp_challenge)
     -> krb5_error_code;
    pub fn krb5_responder_otp_set_answer(ctx: krb5_context,
                                         rctx: krb5_responder_context,
                                         ti: size_t,
                                         value: *const ::libc::c_char,
                                         pin: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_responder_otp_challenge_free(ctx: krb5_context,
                                             rctx: krb5_responder_context,
                                             chl:
                                                 *mut krb5_responder_otp_challenge)
     -> ();
    pub fn krb5_responder_pkinit_get_challenge(ctx: krb5_context,
                                               rctx: krb5_responder_context,
                                               chl_out:
                                                   *mut *mut krb5_responder_pkinit_challenge)
     -> krb5_error_code;
    pub fn krb5_responder_pkinit_set_answer(ctx: krb5_context,
                                            rctx: krb5_responder_context,
                                            identity: *const ::libc::c_char,
                                            pin: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_responder_pkinit_challenge_free(ctx: krb5_context,
                                                rctx: krb5_responder_context,
                                                chl:
                                                    *mut krb5_responder_pkinit_challenge)
     -> ();
    pub fn krb5_get_init_creds_opt_alloc(context: krb5_context,
                                         opt:
                                             *mut *mut krb5_get_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_free(context: krb5_context,
                                        opt: *mut krb5_get_init_creds_opt)
     -> ();
    pub fn krb5_get_init_creds_opt_init(opt: *mut krb5_get_init_creds_opt)
     -> ();
    pub fn krb5_get_init_creds_opt_set_tkt_life(opt:
                                                    *mut krb5_get_init_creds_opt,
                                                tkt_life: krb5_deltat) -> ();
    pub fn krb5_get_init_creds_opt_set_renew_life(opt:
                                                      *mut krb5_get_init_creds_opt,
                                                  renew_life: krb5_deltat)
     -> ();
    pub fn krb5_get_init_creds_opt_set_forwardable(opt:
                                                       *mut krb5_get_init_creds_opt,
                                                   forwardable: ::libc::c_int)
     -> ();
    pub fn krb5_get_init_creds_opt_set_proxiable(opt:
                                                     *mut krb5_get_init_creds_opt,
                                                 proxiable: ::libc::c_int)
     -> ();
    pub fn krb5_get_init_creds_opt_set_canonicalize(opt:
                                                        *mut krb5_get_init_creds_opt,
                                                    canonicalize:
                                                        ::libc::c_int) -> ();
    pub fn krb5_get_init_creds_opt_set_anonymous(opt:
                                                     *mut krb5_get_init_creds_opt,
                                                 anonymous: ::libc::c_int)
     -> ();
    pub fn krb5_get_init_creds_opt_set_etype_list(opt:
                                                      *mut krb5_get_init_creds_opt,
                                                  etype_list:
                                                      *mut krb5_enctype,
                                                  etype_list_length:
                                                      ::libc::c_int) -> ();
    pub fn krb5_get_init_creds_opt_set_address_list(opt:
                                                        *mut krb5_get_init_creds_opt,
                                                    addresses:
                                                        *mut *mut krb5_address)
     -> ();
    pub fn krb5_get_init_creds_opt_set_preauth_list(opt:
                                                        *mut krb5_get_init_creds_opt,
                                                    preauth_list:
                                                        *mut krb5_preauthtype,
                                                    preauth_list_length:
                                                        ::libc::c_int) -> ();
    pub fn krb5_get_init_creds_opt_set_salt(opt: *mut krb5_get_init_creds_opt,
                                            salt: *mut krb5_data) -> ();
    pub fn krb5_get_init_creds_opt_set_change_password_prompt(opt:
                                                                  *mut krb5_get_init_creds_opt,
                                                              prompt:
                                                                  ::libc::c_int)
     -> ();
    pub fn krb5_get_init_creds_opt_set_pa(context: krb5_context,
                                          opt: *mut krb5_get_init_creds_opt,
                                          attr: *const ::libc::c_char,
                                          value: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_fast_ccache_name(context: krb5_context,
                                                        opt:
                                                            *mut krb5_get_init_creds_opt,
                                                        fast_ccache_name:
                                                            *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_fast_ccache(context: krb5_context,
                                                   opt:
                                                       *mut krb5_get_init_creds_opt,
                                                   ccache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_in_ccache(context: krb5_context,
                                                 opt:
                                                     *mut krb5_get_init_creds_opt,
                                                 ccache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_out_ccache(context: krb5_context,
                                                  opt:
                                                      *mut krb5_get_init_creds_opt,
                                                  ccache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_fast_flags(context: krb5_context,
                                                  opt:
                                                      *mut krb5_get_init_creds_opt,
                                                  flags: krb5_flags)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_get_fast_flags(context: krb5_context,
                                                  opt:
                                                      *mut krb5_get_init_creds_opt,
                                                  out_flags: *mut krb5_flags)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_expire_callback(context: krb5_context,
                                                       opt:
                                                           *mut krb5_get_init_creds_opt,
                                                       cb:
                                                           krb5_expire_callback_func,
                                                       data:
                                                           *mut ::libc::c_void)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_responder(context: krb5_context,
                                                 opt:
                                                     *mut krb5_get_init_creds_opt,
                                                 responder: krb5_responder_fn,
                                                 data: *mut ::libc::c_void)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_password(context: krb5_context,
                                        creds: *mut krb5_creds,
                                        client: krb5_principal,
                                        password: *const ::libc::c_char,
                                        prompter: krb5_prompter_fct,
                                        data: *mut ::libc::c_void,
                                        start_time: krb5_deltat,
                                        in_tkt_service: *const ::libc::c_char,
                                        k5_gic_options:
                                            *mut krb5_get_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_init_creds_free(context: krb5_context,
                                ctx: krb5_init_creds_context) -> ();
    pub fn krb5_init_creds_get(context: krb5_context,
                               ctx: krb5_init_creds_context)
     -> krb5_error_code;
    pub fn krb5_init_creds_get_creds(context: krb5_context,
                                     ctx: krb5_init_creds_context,
                                     creds: *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_init_creds_get_error(context: krb5_context,
                                     ctx: krb5_init_creds_context,
                                     error: *mut *mut krb5_error)
     -> krb5_error_code;
    pub fn krb5_init_creds_init(context: krb5_context, client: krb5_principal,
                                prompter: krb5_prompter_fct,
                                data: *mut ::libc::c_void,
                                start_time: krb5_deltat,
                                options: *mut krb5_get_init_creds_opt,
                                ctx: *mut krb5_init_creds_context)
     -> krb5_error_code;
    pub fn krb5_init_creds_set_keytab(context: krb5_context,
                                      ctx: krb5_init_creds_context,
                                      keytab: krb5_keytab) -> krb5_error_code;
    pub fn krb5_init_creds_step(context: krb5_context,
                                ctx: krb5_init_creds_context,
                                _in: *mut krb5_data, out: *mut krb5_data,
                                realm: *mut krb5_data,
                                flags: *mut ::libc::c_uint)
     -> krb5_error_code;
    pub fn krb5_init_creds_set_password(context: krb5_context,
                                        ctx: krb5_init_creds_context,
                                        password: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_init_creds_set_service(context: krb5_context,
                                       ctx: krb5_init_creds_context,
                                       service: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_init_creds_get_times(context: krb5_context,
                                     ctx: krb5_init_creds_context,
                                     times: *mut krb5_ticket_times)
     -> krb5_error_code;
    pub fn krb5_tkt_creds_init(context: krb5_context, ccache: krb5_ccache,
                               creds: *mut krb5_creds, options: krb5_flags,
                               ctx: *mut krb5_tkt_creds_context)
     -> krb5_error_code;
    pub fn krb5_tkt_creds_get(context: krb5_context,
                              ctx: krb5_tkt_creds_context) -> krb5_error_code;
    pub fn krb5_tkt_creds_get_creds(context: krb5_context,
                                    ctx: krb5_tkt_creds_context,
                                    creds: *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_tkt_creds_free(context: krb5_context,
                               ctx: krb5_tkt_creds_context) -> ();
    pub fn krb5_tkt_creds_step(context: krb5_context,
                               ctx: krb5_tkt_creds_context,
                               _in: *mut krb5_data, out: *mut krb5_data,
                               realm: *mut krb5_data,
                               flags: *mut ::libc::c_uint) -> krb5_error_code;
    pub fn krb5_tkt_creds_get_times(context: krb5_context,
                                    ctx: krb5_tkt_creds_context,
                                    times: *mut krb5_ticket_times)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_keytab(context: krb5_context,
                                      creds: *mut krb5_creds,
                                      client: krb5_principal,
                                      arg_keytab: krb5_keytab,
                                      start_time: krb5_deltat,
                                      in_tkt_service: *const ::libc::c_char,
                                      k5_gic_options:
                                          *mut krb5_get_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_verify_init_creds_opt_init(k5_vic_options:
                                               *mut krb5_verify_init_creds_opt)
     -> ();
    pub fn krb5_verify_init_creds_opt_set_ap_req_nofail(k5_vic_options:
                                                            *mut krb5_verify_init_creds_opt,
                                                        ap_req_nofail:
                                                            ::libc::c_int)
     -> ();
    pub fn krb5_verify_init_creds(context: krb5_context,
                                  creds: *mut krb5_creds,
                                  server: krb5_principal, keytab: krb5_keytab,
                                  ccache: *mut krb5_ccache,
                                  options: *mut krb5_verify_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_get_validated_creds(context: krb5_context,
                                    creds: *mut krb5_creds,
                                    client: krb5_principal,
                                    ccache: krb5_ccache,
                                    in_tkt_service: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_get_renewed_creds(context: krb5_context,
                                  creds: *mut krb5_creds,
                                  client: krb5_principal, ccache: krb5_ccache,
                                  in_tkt_service: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn krb5_decode_ticket(code: *const krb5_data,
                              rep: *mut *mut krb5_ticket) -> krb5_error_code;
    pub fn krb5_appdefault_string(context: krb5_context,
                                  appname: *const ::libc::c_char,
                                  realm: *const krb5_data,
                                  option: *const ::libc::c_char,
                                  default_value: *const ::libc::c_char,
                                  ret_value: *mut *mut ::libc::c_char) -> ();
    pub fn krb5_appdefault_boolean(context: krb5_context,
                                   appname: *const ::libc::c_char,
                                   realm: *const krb5_data,
                                   option: *const ::libc::c_char,
                                   default_value: ::libc::c_int,
                                   ret_value: *mut ::libc::c_int) -> ();
    pub fn krb5_get_prompt_types(context: krb5_context)
     -> *mut krb5_prompt_type;
    pub fn krb5_set_error_message(ctx: krb5_context, code: krb5_error_code,
                                  fmt: *const ::libc::c_char, ...) -> ();
    pub fn krb5_vset_error_message(ctx: krb5_context, code: krb5_error_code,
                                   fmt: *const ::libc::c_char, args: va_list)
     -> ();
    pub fn krb5_copy_error_message(dest_ctx: krb5_context,
                                   src_ctx: krb5_context) -> ();
    pub fn krb5_get_error_message(ctx: krb5_context, code: krb5_error_code)
     -> *const ::libc::c_char;
    pub fn krb5_free_error_message(ctx: krb5_context,
                                   msg: *const ::libc::c_char) -> ();
    pub fn krb5_clear_error_message(ctx: krb5_context) -> ();
    pub fn krb5_decode_authdata_container(context: krb5_context,
                                          _type: krb5_authdatatype,
                                          container: *const krb5_authdata,
                                          authdata:
                                              *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_encode_authdata_container(context: krb5_context,
                                          _type: krb5_authdatatype,
                                          authdata: *const *mut krb5_authdata,
                                          container:
                                              *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_make_authdata_kdc_issued(context: krb5_context,
                                         key: *const krb5_keyblock,
                                         issuer: krb5_const_principal,
                                         authdata: *const *mut krb5_authdata,
                                         ad_kdcissued:
                                             *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_verify_authdata_kdc_issued(context: krb5_context,
                                           key: *const krb5_keyblock,
                                           ad_kdcissued: *const krb5_authdata,
                                           issuer: *mut krb5_principal,
                                           authdata:
                                               *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_pac_add_buffer(context: krb5_context, pac: krb5_pac,
                               _type: krb5_ui_4, data: *const krb5_data)
     -> krb5_error_code;
    pub fn krb5_pac_free(context: krb5_context, pac: krb5_pac) -> ();
    pub fn krb5_pac_get_buffer(context: krb5_context, pac: krb5_pac,
                               _type: krb5_ui_4, data: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_pac_get_types(context: krb5_context, pac: krb5_pac,
                              len: *mut size_t, types: *mut *mut krb5_ui_4)
     -> krb5_error_code;
    pub fn krb5_pac_init(context: krb5_context, pac: *mut krb5_pac)
     -> krb5_error_code;
    pub fn krb5_pac_parse(context: krb5_context, ptr: *const ::libc::c_void,
                          len: size_t, pac: *mut krb5_pac) -> krb5_error_code;
    pub fn krb5_pac_verify(context: krb5_context, pac: krb5_pac,
                           authtime: krb5_timestamp,
                           principal: krb5_const_principal,
                           server: *const krb5_keyblock,
                           privsvr: *const krb5_keyblock) -> krb5_error_code;
    pub fn krb5_pac_sign(context: krb5_context, pac: krb5_pac,
                         authtime: krb5_timestamp,
                         principal: krb5_const_principal,
                         server_key: *const krb5_keyblock,
                         privsvr_key: *const krb5_keyblock,
                         data: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_allow_weak_crypto(context: krb5_context, enable: krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_set_trace_callback(context: krb5_context,
                                   _fn: krb5_trace_callback,
                                   cb_data: *mut ::libc::c_void)
     -> krb5_error_code;
    pub fn krb5_set_trace_filename(context: krb5_context,
                                   filename: *const ::libc::c_char)
     -> krb5_error_code;
    pub fn initialize_krb5_error_table() -> ();
    pub fn initialize_krb5_error_table_r(list: *mut *mut Struct_et_list)
     -> ();
    pub fn initialize_k5e1_error_table() -> ();
    pub fn initialize_k5e1_error_table_r(list: *mut *mut Struct_et_list)
     -> ();
    pub fn initialize_kdb5_error_table() -> ();
    pub fn initialize_kdb5_error_table_r(list: *mut *mut Struct_et_list)
     -> ();
    pub fn initialize_kv5m_error_table() -> ();
    pub fn initialize_kv5m_error_table_r(list: *mut *mut Struct_et_list)
     -> ();
    pub fn initialize_k524_error_table() -> ();
    pub fn initialize_k524_error_table_r(list: *mut *mut Struct_et_list)
     -> ();
    pub fn initialize_asn1_error_table() -> ();
    pub fn initialize_asn1_error_table_r(list: *mut *mut Struct_et_list)
     -> ();
}
